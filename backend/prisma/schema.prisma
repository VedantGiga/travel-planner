generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  email            String          @unique
  name             String?
  password         String
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  trips            Trip[]
  preferences      UserPreference?
  sentConnections  Connection[]    @relation("SentConnections")
  receivedConnections Connection[] @relation("ReceivedConnections")
  posts            Post[]
  safetyReports    SafetyReport[]
}

model Trip {
  id          String        @id @default(cuid())
  title       String
  description String?
  destination String
  startDate   DateTime
  endDate     DateTime
  budget      Float?
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  bookings    Booking[]
  trainResults TrainResult[]
}

model Booking {
  id       String      @id @default(cuid())
  type     BookingType
  details  Json
  tripId   String
  trip     Trip        @relation(fields: [tripId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model TrainResult {
  id           String   @id @default(cuid())
  trainNumber  String
  trainName    String
  fromStation  String
  toStation    String
  departure    String
  arrival      String
  duration     String
  sleeperPrice Int?
  ac3Price     Int?
  ac2Price     Int?
  availability String?
  date         DateTime
  tripId       String?
  trip         Trip?    @relation(fields: [tripId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([fromStation, toStation, date])
}

model UserPreference {
  id                   String   @id @default(cuid())
  userId               String   @unique
  preferredBudgetRange String   @default("mid-range")
  preferredTripType    String   @default("leisure")
  preferredDuration    Int      @default(5)
  lastDestination      String?
  travelStyle          String   @default("comfort")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Connection {
  id         String            @id @default(cuid())
  senderId   String
  receiverId String
  status     ConnectionStatus  @default(PENDING)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  
  sender     User              @relation("SentConnections", fields: [senderId], references: [id])
  receiver   User              @relation("ReceivedConnections", fields: [receiverId], references: [id])
  
  @@unique([senderId, receiverId])
}

enum BookingType {
  FLIGHT
  HOTEL
  TRAIN
  ACTIVITY
}

model Post {
  id        String   @id @default(cuid())
  content   String
  image     String?
  tags      String[]
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  likes     Int      @default(0)
  comments  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SafetyReport {
  id          String       @id @default(cuid())
  type        ReportType
  title       String
  description String
  location    String
  latitude    Float
  longitude   Float
  severity    String
  verified    Boolean      @default(false)
  upvotes     Int          @default(0)
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@index([latitude, longitude])
}

model ScamAlert {
  id          String   @id @default(cuid())
  category    String
  description String
  amount      Float?
  location    String
  latitude    Float
  longitude   Float
  aiAnalysis  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([latitude, longitude])
}

enum ReportType {
  SCAM
  UNSAFE_AREA
  FAKE_GUIDE
  TAXI_FRAUD
  OVERPRICING
  TOURIST_TRAP
  AGGRESSIVE_VENDOR
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
}